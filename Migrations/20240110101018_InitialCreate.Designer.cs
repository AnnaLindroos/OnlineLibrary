// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineLibrary.Models;

#nullable disable

namespace OnlineLibrary.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240110101018_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorISBN", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("int");

                    b.Property<int>("ISBNsId")
                        .HasColumnType("int");

                    b.HasKey("AuthorsId", "ISBNsId");

                    b.HasIndex("ISBNsId");

                    b.ToTable("AuthorISBN");
                });

            modelBuilder.Entity("OnlineLibrary.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("OnlineLibrary.Models.BookCopy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ISBNId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRented")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ISBNId");

                    b.ToTable("BookCopies");
                });

            modelBuilder.Entity("OnlineLibrary.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoanCardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LoanCardId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("OnlineLibrary.Models.ISBN", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ISBNNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ISBNNumber")
                        .IsUnique();

                    b.ToTable("ISBNs");
                });

            modelBuilder.Entity("OnlineLibrary.Models.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("LoanCardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("LoanCardId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("OnlineLibrary.Models.LoanCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LoanCardNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LoanCardNumber")
                        .IsUnique();

                    b.ToTable("LoanCards");
                });

            modelBuilder.Entity("OnlineLibrary.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookRating")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ISBNId")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ISBNId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("AuthorISBN", b =>
                {
                    b.HasOne("OnlineLibrary.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineLibrary.Models.ISBN", null)
                        .WithMany()
                        .HasForeignKey("ISBNsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineLibrary.Models.BookCopy", b =>
                {
                    b.HasOne("OnlineLibrary.Models.ISBN", "ISBN")
                        .WithMany("BookCopies")
                        .HasForeignKey("ISBNId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ISBN");
                });

            modelBuilder.Entity("OnlineLibrary.Models.Customer", b =>
                {
                    b.HasOne("OnlineLibrary.Models.LoanCard", "LoanCard")
                        .WithOne("Customer")
                        .HasForeignKey("OnlineLibrary.Models.Customer", "LoanCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanCard");
                });

            modelBuilder.Entity("OnlineLibrary.Models.Loan", b =>
                {
                    b.HasOne("OnlineLibrary.Models.BookCopy", "Book")
                        .WithMany("Loans")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineLibrary.Models.LoanCard", "LoanCard")
                        .WithMany()
                        .HasForeignKey("LoanCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("LoanCard");
                });

            modelBuilder.Entity("OnlineLibrary.Models.Rating", b =>
                {
                    b.HasOne("OnlineLibrary.Models.Customer", "Customer")
                        .WithMany("Ratings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineLibrary.Models.ISBN", "ISBN")
                        .WithMany("Ratings")
                        .HasForeignKey("ISBNId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("ISBN");
                });

            modelBuilder.Entity("OnlineLibrary.Models.BookCopy", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("OnlineLibrary.Models.Customer", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("OnlineLibrary.Models.ISBN", b =>
                {
                    b.Navigation("BookCopies");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("OnlineLibrary.Models.LoanCard", b =>
                {
                    b.Navigation("Customer");
                });
#pragma warning restore 612, 618
        }
    }
}
